import logging
from fastapi import APIRouter, Query
from services.ecocrop_service import ecocrop_service
from services.weather_service import get_weather
from datetime import datetime

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –° –¶–í–ï–¢–ê–ú–ò –í –ö–û–ù–°–û–õ–ò ===
class ColorFormatter(logging.Formatter):
    GREEN = "\033[92m"
    RED = "\033[31m"
    RESET = "\033[0m"

    def format(self, record):
        # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ INFO ‚Äî –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
        if record.levelno > logging.INFO:
            color = self.RED
        else:
            color = self.GREEN

        log_format = f"{color}%(asctime)s [%(levelname)s]{self.RESET} %(message)s"
        formatter = logging.Formatter(log_format, "%Y-%m-%d %H:%M:%S")
        return formatter.format(record)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
handler = logging.StreamHandler()
handler.setFormatter(ColorFormatter())
logging.basicConfig(level=logging.INFO, handlers=[handler])


router = APIRouter()

@router.get("/check")
def check_crop_suitability(
    city: str = Query(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: Paris"),
    crop: str = Query(..., description="–ù–∞—É—á–Ω–æ–µ –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã"),
):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥—Ö–æ–¥—è—Ç –ª–∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤ –≥–æ—Ä–æ–¥–µ –¥–ª—è –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã.
    """
    weather = get_weather(city)
    if not weather or ("error" in weather):
        return weather if isinstance(weather, dict) else {"error": f"Unable to retrieve weather data for city '{city}'."}

    crop_data = ecocrop_service.get_crop(crop)
    if not crop_data:
        return {"error": f"Crop '{crop}' not found in EcoCrop database."}

    # --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω—É–∂–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–≥–æ–¥—ã ---
    main_data = weather.get("main", {})
    rain_data = weather.get("rain", {})

    temp = main_data.get("temp")            # ¬∞C
    humidity = main_data.get("humidity")    # %
    # –∏–Ω–æ–≥–¥–∞ –∫–ª—é—á –º–æ–∂–µ—Ç –±—ã—Ç—å "1h" –∏–ª–∏ "3h" ‚Äî –±–µ—Ä—ë–º –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
    rain = rain_data.get("1h") or 0.0 

    logging.info("=== WEATHER DATA ===")
    logging.info(f"–ì–æ—Ä–æ–¥: {city}")
    logging.info(f"–ü–æ–≥–æ–¥–∞: {weather}")
    logging.info(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C, –û—Å–∞–¥–∫–∏: {rain} –º–º, –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%")


    # From EcoCrop
    tmin = crop_data.get("TMIN")
    tmax = crop_data.get("TMAX")
    # Rain –∑–∞ –≥–æ–¥
    rmin = crop_data.get("RMIN") 
    rmax = crop_data.get("RMAX")

    logging.info("=== CROP DATA ===")
    logging.info(f"–ö—É–ª—å—Ç—É—Ä–∞: {crop}")
    logging.info(f"TMIN: {tmin}¬∞C, TMAX: {tmax}¬∞C")
    logging.info(f"RMIN: {rmin} –º–º/–≥–æ–¥, RMAX: {rmax} –º–º/–≥–æ–¥")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    suitable = False
    results = []
    if tmin and tmax:
        if temp < tmin:
            results.append(f"Too cold (current {temp}¬∞C, needs ‚â• {tmin}¬∞C)")
        elif temp > tmax:
            results.append(f"Too hot (current {temp}¬∞C, needs ‚â§ {tmax}¬∞C)")
        else:
            results.append(f"Temperature is suitable ({temp}¬∞C ‚àà [{tmin}, {tmax}]¬∞C)")
            suitable = True
    """# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–∞–¥–∫–∏ –∑–∞ –≥–æ–¥ NASA POWER
    if rmin and rmax:
        if rain < rmin:
            results.append(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Å–∞–¥–∫–æ–≤ ({rain} –º–º, –Ω—É–∂–Ω–æ ‚â• {rmin} –º–º)")
        elif rain > rmax:
            results.append(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—Å–∞–¥–∫–æ–≤ ({rain} –º–º, –Ω—É–∂–Ω–æ ‚â§ {rmax} –º–º)")
        else:
            results.append(f"–û—Å–∞–¥–∫–∏ –≤ –Ω–æ—Ä–º–µ ({rain} –º–º ‚àà [{rmin}, {rmax}] –º–º)")
    """


    # –û–±—â–∏–π –≤—ã–≤–æ–¥
    return {
        "city": city, # weather.get("name")
        "crop": crop,
        "suitable": suitable,
        "details": results,
        # === OpenWeather Data ===
        "weather": {
            # "coord": weather.get("coord"), # lon, lat
            # id: int, main: Clouds, description: few clouds, icon: 02n
            "weather": weather.get("weather"), 
            # temp, feels_like, temp_min, temp_max, pressure, humidity, sea_level, grand_level
            "main": weather.get("main"), 
            # speed, deg, +- gust
            "wind": weather.get("wind"),
            
            "clouds": weather.get("clouds"), # %
            "rain": weather.get("rain"), # +-
            "snow": weather.get("snow"), # +-

            "sys": {
                "country": weather.get("sys", {}).get("country"), # DE
                "sunrise": datetime.utcfromtimestamp(weather.get("sys", {}).get("sunrise")).strftime('%Y-%m-%d %H:%M'),
                "sunset": datetime.utcfromtimestamp(weather.get("sys", {}).get("sunset")).strftime('%Y-%m-%d %H:%M'),
            },
            # "timezone": weather.get("timezone") # seconds shift from UTC     
        },

        "crop_info": crop_data

        # "crop_info": {
        #     "ScientificName": crop_data.get("ScientificName"),
        #     # –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—è –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
        #     "LIFO": crop_data.get("LIFO"), # —Ñ–æ—Ä–º–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è 
        #     "HABIT": crop_data.get("HABIT"), # —Ç–∏–ø —Ä–∞—Å—Ç–µ–Ω–∏—è
        #     # +++
        #     "LISPA": crop_data.get("LISPA"), # —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ annual/biennial/perennial
        #     "PHYS": crop_data.get("PHYS"),   # —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞

        #     # üßë‚Äçüåæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ
        #     "CAT": crop_data.get("CAT"),       # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫—É–ª—å—Ç—É—Ä—ã
        #     "PLAT": crop_data.get("PLAT"),     # –ú–∞—à—Ç–∞–± –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è
        #     "PROSY": crop_data.get("PROSY"), # –°—Ñ–µ—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        #     "GMIN": crop_data.get("GMIN"),   # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–µ–≥–µ—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –º–∏–Ω
        #     "GMAX": crop_data.get("GMAX"),   # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–µ–≥–µ—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –º–∞–∫—Å

        #     # üì∏ –§–æ—Ç–æ–ø–µ—Ä–∏–æ–¥
        #     "PHOTO": crop_data.get("PHOTO"),     # —Ñ–æ—Ç–æ–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è

        #     # üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ üåßÔ∏è –û—Å–∞–¥–∫–∏ 
        #     "TOPMN": crop_data.get("TOPMN"), # –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–∏–Ω
        #     "TOPMX": crop_data.get("TOPMX"), # –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–∞–∫—Å
        #     "ROPMN": crop_data.get("ROPMN"), # –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –æ—Å–∞–¥–∫–∏ –º–∏–Ω
        #     "ROPMX": crop_data.get("ROPMX"), # –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –æ—Å–∞–¥–∫–∏ –º–∞–∫—Å
        #     "TMIN": tmin,  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        #     "TMAX": tmax,   # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        #     "RMIN": rmin,   # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ—Å–∞–¥–∫–∏
        #     "RMAX": rmax,   # –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –æ—Å–∞–¥–∫–∏
            
        #     "PHMIN": crop_data.get("PHMIN"),   # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ pH –ø–æ—á–≤—ã
        #     "PHMAX": crop_data.get("PHMAX"),   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ pH –ø–æ—á–≤—ã
        #     "PHOPMN": crop_data.get("PHOPMN"), # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ pH –ø–æ—á–≤—ã –º–∏–Ω
        #     "PHOPMX": crop_data.get("PHOPMX"), # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ pH –ø–æ—á–≤—ã –º–∞–∫—Å

        #     # üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è
        #     "LATOPMN": crop_data.get("LATOPMN"), # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–æ—Ç–∞ –º–∏–Ω
        #     "LATOPMX": crop_data.get("LATOPMX"), # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–æ—Ç–∞ –º–∞–∫—Å
        #     "LATMN": crop_data.get("LATMN"),     # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —à–∏—Ä–æ—Ç—ã –º–∏–Ω
        #     "LATMX": crop_data.get("LATMX"),     # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —à–∏—Ä–æ—Ç—ã –º–∞–∫—Å
        #     "ALTMX": crop_data.get("ALTMX"),     # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –Ω–∞–¥ —É—Ä–æ–≤–Ω–µ–º –º–æ—Ä—è (–º)
                
        #     # ‚òÄÔ∏è –°–≤–µ—Ç
        #     "LIOPMN": crop_data.get("LIOPMN"),  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç–∏
        #     "LIOPMX": crop_data.get("LIOPMX"),  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç–∏
        #     "LIMN": crop_data.get("LIMN"),      # –î–æ–ø—É—Å—Ç–∏–º—ã–π –º–∏–Ω–∏–º—É–º –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç–∏
        #     "LIMX": crop_data.get("LIMX"),      # –î–æ–ø—É—Å—Ç–∏–º—ã–π –º–∞–∫—Å–∏–º—É–º –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç–∏

        #     # üß± –ü–æ—á–≤–∞
        #     "DEP": crop_data.get("DEP"),        # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –ø–æ—á–≤—ã
        #     "DEPR": crop_data.get("DEPR"),      # –î–æ–ø—É—Å—Ç–∏–º–∞—è –≥–ª—É–±–∏–Ω–∞ –ø–æ—á–≤—ã
        #     "TEXT": crop_data.get("TEXT"),      # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ –ø–æ—á–≤—ã
        #     "TEXTR": crop_data.get("TEXTR"),    # –î–æ–ø—É—Å—Ç–∏–º–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ –ø–æ—á–≤—ã
        #     "FER": crop_data.get("FER"),        # –¢—Ä–µ–±—É–µ–º–æ–µ –ø–ª–æ–¥–æ—Ä–æ–¥–∏–µ
        #     "FERR": crop_data.get("FERR"),      # –î–æ–ø—É—Å—Ç–∏–º–æ–µ –ø–ª–æ–¥–æ—Ä–æ–¥–∏–µ
        #     "SAL": crop_data.get("SAL"),        # –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —Å–æ–ª—ë–Ω–æ—Å—Ç–∏
        #     "SALR": crop_data.get("SALR"),      # –î–æ–ø—É—Å—Ç–∏–º–∞—è —Å–æ–ª—ë–Ω–æ—Å—Ç—å
        #     "DRA": crop_data.get("DRA"),        # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥—Ä–µ–Ω–∞–∂—É
        #     "DRAR": crop_data.get("DRAR"),      # –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥—Ä–µ–Ω–∞–∂ / –∑–∞—Å—É—Ö–∞

        #     # ‚ò†Ô∏è –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å
        #     "TOX": crop_data.get("TOX"),        # –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —Ç–æ–∫—Å–∏—á–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º
        #     "TOXR": crop_data.get("TOXR"),      # –î–æ–ø—É—Å—Ç–∏–º–∞—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å

        #     # üì∏ –§–æ—Ç–æ–ø–µ—Ä–∏–æ–¥
        #     "PHOTO": crop_data.get("PHOTO"),    # –¢—Ä–µ–±—É–µ–º–∞—è –¥–ª–∏–Ω–∞ –¥–Ω—è

        #     # üå¶Ô∏è –ö–ª–∏–º–∞—Ç
        #     "CLIZ": crop_data.get("CLIZ"),      # –ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–æ–Ω—ã –ø–æ –ö—ë–ø–ø–µ–Ω—É

        #     # üß¨ –ê–¥–∞–ø—Ç–∞—Ü–∏—è
        #     "ABITOL": crop_data.get("ABITOL"),  # –¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫ –∞–±–∏–æ—Ç–∏—á–µ—Å–∫–∏–º —Å—Ç—Ä–µ—Å—Å–∞–º
        #     "ABISUS": crop_data.get("ABISUS"),  # –û—Å–Ω–æ–≤–Ω–æ–π –∞–±–∏–æ—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä
        #     "INTRI": crop_data.get("INTRI"),    # –ò—Å—Ç–æ—Ä–∏—è –∏–Ω—Ç—Ä–æ–¥—É–∫—Ü–∏–∏
        # }
    }
